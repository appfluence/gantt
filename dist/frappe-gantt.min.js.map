{"version":3,"file":"frappe-gantt.min.js","sources":["../src/date_utils.js","../src/svg_utils.js","../src/bar.js","../src/arrow.js","../src/popup.js","../src/index.js"],"sourcesContent":["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map((val) => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const dateTimeFormat = new Intl.DateTimeFormat(lang, {\n            month: 'long'\n        });\n        const month_name = dateTimeFormat.format(date);\n        const month_name_capitalized =\n            month_name.charAt(0).toUpperCase() + month_name.slice(1);\n\n        const values = this.get_date_values(date).map(d => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS: values[6],\n            D: values[2],\n            MMMM: month_name_capitalized,\n            MMM: month_name_capitalized,\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach((key) => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years,\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0,\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n","export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nexport function screenYtoSVGUnits(val, svg) {\n    try {\n        let pt = svg.createSVGPoint();\n        pt.x = 0;\n        pt.y = val;\n        pt = pt.matrixTransform(svg.getCTM().inverse());\n        return pt.y;\n    } catch (err) {\n        return val;\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin, // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out'),\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1',\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function (event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function (e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n","import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n            this.duration *\n            (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group,\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group,\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid && !this.gantt.options.can_click_ghost_task) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n            this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'contextmenu', e => {\n            this.gantt.trigger_event('contextmenu', [this.task, e]);\n        });\n\n        $.on(this.group, 'dblclick', e => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(\n            this.task._start,\n            'MMM D',\n            this.gantt.options.language\n        );\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task\n        });\n    }\n\n    update_bar_position({ x = null, width = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map((dep) => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second'),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = (diff / step) * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = (diff * column_width) / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        if (this.invalid) return;\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n    }\n\n    update_handle_position() {\n        if (this.invalid) return;\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n","import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.from_task.task._index +\n            this.gantt.options.padding;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height / 2 +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.to_task.task._index +\n            this.gantt.options.padding;\n\n        const from_is_below_to =\n            this.from_task.task._index > this.to_task.task._index;\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id,\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n","export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            const empty = !html;\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n            if (empty) {\n                this.pointer.style.display = 'none';\n            }\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n    }\n}\n","import date_utils from './date_utils';\nimport { $, createSVG, screenYtoSVGUnits } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frappé Gantt only supports usage of a string CSS selector,' +\n                \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    update_sticky_header_position() {\n        const y = screenYtoSVGUnits(this.$container.scrollTop, this.$svg);\n        const dateGrid = this.$svg.getElementsByClassName('date')[0];\n        dateGrid.setAttribute('transform', `translate(0, ${y})`);\n        const gridHeader = this.$svg.getElementsByClassName('grid-header')[0];\n        gridHeader.setAttribute('y', y);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            on_contextmenu: () => { },\n            custom_popup_html: null,\n            language: 'en',\n            sticky_header: false,\n            can_click_ghost_task: false\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        const indexedTasks = {};\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            task._cyclic = false;\n            indexedTasks[task.id] = task;\n            return task;\n        });\n\n        this.tasks.forEach(rootTask => {\n            if (rootTask._cyclic) {\n                return;\n            }\n            const seen = new Set([rootTask.id]);\n            const open = [rootTask.id];\n            let ok = true;\n\n            while (open.length && ok) {\n                const tId = open.pop();\n                const t = indexedTasks[tId];\n                if (t._cyclic) {\n                    ok = false;\n                    break;\n                }\n                for (let dId of t.dependencies) {\n                    if (seen.has(dId)) {\n                        ok = false;\n                        break;\n                    }\n                    seen.add(dId);\n                    open.push(dId);\n                }\n            }\n\n            if (!ok) {\n                seen.forEach((seenID) => {\n                    const t = indexedTasks[seenID];\n                    t._cyclic = true;\n                });\n            }\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks, updateScroll = false) {\n        this.setup_tasks(tasks);\n        this.change_view_mode(undefined, updateScroll);\n    }\n\n    change_view_mode(mode = this.options.view_mode, updateScroll = true) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render(updateScroll);\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n        this.bind_sticky_header();\n    }\n\n    render(updateScroll = true) {\n        const parent_element = this.$svg.parentElement;\n        const currentScroll = parent_element.scrollLeft;\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        if (updateScroll) {\n            this.set_scroll_position();\n        } else {\n            parent_element.scrollLeft = currentScroll;\n        }\n        if (this.options.sticky_header) {\n            this.update_sticky_header_position();\n        }\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = [\n            'grid',\n            'arrow',\n            'progress',\n            'bar',\n            'details',\n            'header',\n            'date'\n        ];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (\n                this.view_is(VIEW_MODE.MONTH) &&\n                (date.getMonth() + 1) % 3 === 0\n            ) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        const today = date_utils.today();\n        const getOffset = {\n            [VIEW_MODE.DAY]: () =>\n                date_utils.diff(today, this.gantt_start, 'hour'),\n            [VIEW_MODE.HALF_DAY]: () =>\n                date_utils.diff(today, this.gantt_start, 'hour'),\n            [VIEW_MODE.QUARTER_DAY]: () =>\n                date_utils.diff(today, this.gantt_start, 'hour'),\n            [VIEW_MODE.WEEK]: () =>\n                date_utils.diff(\n                    date_utils.start_of(today, 'week'),\n                    this.gantt_start,\n                    'hour'\n                ),\n            [VIEW_MODE.MONTH]: () =>\n                date_utils.diff(\n                    date_utils.start_of(today, 'month'),\n                    this.gantt_start,\n                    'hour'\n                )\n        };\n\n        const offset = getOffset[this.options.view_mode]();\n\n        const x = offset / this.options.step * this.options.column_width;\n        const y = 0;\n\n        const width = this.options.column_width;\n        const height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length +\n            this.options.header_height +\n            this.options.padding / 2;\n\n        createSVG('rect', {\n            x,\n            y,\n            width,\n            height,\n            class: 'today-highlight',\n            append_to: this.layers.grid\n        });\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                            date,\n                            'D MMM',\n                            this.options.language\n                        )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': 0,\n            'Quarter Day_upper': this.options.column_width * 4 / 2,\n            'Half Day_lower': 0,\n            'Half Day_upper': this.options.column_width * 2 / 2,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: (this.options.column_width * 12) / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_first_task / this.options.step) *\n            this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_sticky_header() {\n        if (this.options.sticky_header) {\n            this.$container.addEventListener(\n                'scroll',\n                this.update_sticky_header_position.bind(this)\n            );\n        }\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const parent_bar = this.get_bar(parent_bar_id);\n            if (parent_bar && parent_bar.task && parent_bar.task._cyclic) {\n                return;\n            }\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach(bar => {\n                if (bar.task.invalid || bar.task._cyclic) return;\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx,\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx,\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', (e) => {\n            this.bar_being_dragged = null;\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n\n    /**\n     * Scroll until today appears in view\n     *\n     * @memberof Gantt\n     */\n    focus_on_today() {\n        try {\n            this.$svg\n                .getElementsByClassName('today-highlight')[0]\n                .scrollIntoView({\n                    behavior: 'smooth',\n                    inline: 'center'\n                });\n        } catch (err) { }\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"names":["date_utils","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","this","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","month_name","Intl","DateTimeFormat","month","month_name_capitalized","charAt","toUpperCase","slice","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","year","day","hour","minute","second","millisecond","should_reset","_scale","clone","get_days_in_month","no_of_days","targetLength","padString","String","repeat","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","keyTimes","keySplines","cubic_bezier","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","Bar","constructor","gantt","task","set_defaults","prepare","draw","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","handle_group","SVGElement","prototype","getX","getY","getWidth","getHeight","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","classList","$bar_progress","requestAnimationFrame","update_label_position","bar","$handle_progress","points","get_progress_polygon_points","join","bar_progress","can_click_ghost_task","setup_click_event","popup_trigger","show_popup","unselect_all","trigger_event","bar_being_dragged","subtitle","language","target_element","title","update_bar_position","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","gantt_start","width_in_units","task_start","view_is","header_height","padding","_index","get_snap_position","dx","rem","position","odx","isNaN","label","getBBox","remove","handle","arrows","arrow","update","Arrow","from_task","to_task","calculate_path","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","left","Popup","parent","custom_html","make","hide","pointer","show","Error","html","empty","style","display","clientWidth","position_meta","HTMLElement","getBoundingClientRect","top","transform","opacity","VIEW_MODE","QUARTER_DAY","HALF_DAY","DAY","WEEK","MONTH","YEAR","Gantt","wrapper","tasks","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","update_sticky_header_position","svg","pt","createSVGPoint","matrixTransform","getCTM","inverse","err","screenYtoSVGUnits","scrollTop","getElementsByClassName","default_options","view_modes","view_mode","date_format","on_contextmenu","custom_popup_html","sticky_header","assign","indexedTasks","start","end","every","deps","trim","filter","random","toString","generate_id","_cyclic","rootTask","seen","Set","open","ok","tId","pop","t","dId","has","seenID","setup_dependencies","dependency_map","refresh","updateScroll","undefined","mode","update_view_scale","setup_dates","render","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","bind_grid_click","bind_bar_events","bind_sticky_header","parent_element","currentScroll","scrollLeft","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","grid_height","grid","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","tick_x","tick_y","tick_height","tick_class","get_dates_to_draw","lower_x","lower_y","lower_text","upper_text","$upper_text","upper_x","upper_y","last_date","get_date_info","date_text","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","Year_upper","base_pos","x_pos","bars","task_id","dependency","get_task","Boolean","cur_width","actual_width","scroll_pos","get_oldest_starting_date","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_wrapper","parent_bar","contains","offsetX","offsetY","ids","get_all_dependent_tasks","ox","oy","owidth","finaldx","bind_bar_progress","is_resizing","min_dx","max_dx","$handle","out","to_process","acc","querySelectorAll","el","modes","Array","isArray","some","find","popup","args","apply","prev_date","focus_on_today","scrollIntoView","behavior","inline"],"mappings":"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"}